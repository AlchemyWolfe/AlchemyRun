// Copyright Alchemy Wolfe.  All Rights Reserved.

#pragma once

#include "CoreMinimal.h"
#include "Components/ActorComponent.h"
#include "Components/BoxComponent.h"
#include "AlchemyCatalog.h"
#include "AlchemyRecipeComponent.generated.h"

UCLASS(Blueprintable, ClassGroup=(Custom), meta=(BlueprintSpawnableComponent))
class ALCHEMYRUN_API UAlchemyRecipeComponent : public UActorComponent
{
    GENERATED_BODY()

public:
    UAlchemyRecipeComponent();

    // Generate reagents (actors) for this recipe
    UFUNCTION(BlueprintCallable, Category = "AlchemyRecipe")
    virtual void InitializeRecipe(int32 Seed, const AActor* Parent, UBoxComponent* FillBox);

    // Generate reagents (actors) for this recipe
    UFUNCTION(BlueprintCallable, Category = "AlchemyRecipe")
    void GenerateStructureReagents();

    // Generate reagents (actors) for this recipe
    UFUNCTION(BlueprintCallable, Category = "AlchemyRecipe")
    void GenerateRequiredReagents();

    // Generate reagents (actors) for this recipe
    UFUNCTION(BlueprintCallable, Category = "AlchemyRecipe")
    void GenerateDecorationReagents();

    // List of actors generated by this recipe
    UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "AlchemyRecipe")
    TArray<AActor*> GeneratedActors;

    // Cleanup previously generated actors
    UFUNCTION(BlueprintCallable, Category = "AlchemyRecipe")
    void ClearGeneratedActors();

protected:
    USceneComponent* AttachParent;
    FVector FillExtent;
    FVector FillOrigin;

    // Called when the component is about to be destroyed
    virtual void BeginDestroy() override;

    // Random stream for deterministic generation
    FRandomStream RandomStream;

    //  This is the function that actually spawns the Reagents.  Override this with procedural generation logic.
    virtual void GenerateStructureReagentsImpl();

    //  This is the function that actually spawns the Reagents.  Override this with procedural generation logic.
    virtual void GenerateRequiredReagentsImpl();

    //  This is the function that actually spawns the Reagents.  Override this with procedural generation logic.
    virtual void GenerateDecorationReagentsImpl();

    // Creates a Reagent Actor from a StaticMesh
    AActor* SpawnReagent(UStaticMesh* Mesh, const FString& NameTag, const FVector& Location, const FRotator& Rotation, bool LocationIsLocal = true);

    // Creates a Reagent Actor from an ActorClass
    AActor* SpawnReagent(const TSubclassOf<AActor>& ActorClass, const FString& NameTag, const FVector& Location, const FRotator& Rotation, bool LocationIsLocal = true);

    // Finds an actor with a specific NameTag, deletes it, and spawns a new actor in its place.  Returns null if no actor is found.
    AActor* FindReagent(const FString& SearchNameTag, const TSubclassOf<AActor>& SearchActorClass = nullptr);

    // Finds an actor with a specific NameTag, deletes it, and spawns a new actor in its place.  Returns null if no actor is found.
    AActor* SpawnReagentInPlaceOf(const FString& NewNameTag, const TSubclassOf<AActor>& NewActorClass, AActor* OldReagent);
    
    // Returns the size of an ActorClass
    static FVector GetActorClassBounds(const TSubclassOf<AActor>& ActorClass);
};

