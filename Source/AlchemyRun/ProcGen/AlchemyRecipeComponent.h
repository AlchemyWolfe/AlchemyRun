// Copyright Alchemy Wolfe.  All Rights Reserved.

#pragma once

#include "CoreMinimal.h"
#include "Components/ActorComponent.h"
#include "Components/BoxComponent.h"
#include "AlchemyEnums.h"
#include "AlchemyRecipeComponent.generated.h"
// Copyright Alchemy Wolfe.  All Rights Reserved.

#pragma once

USTRUCT(BlueprintType)
struct FAlchemyReagentSpec
{
    GENERATED_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "ContentAlchemy")
    TSubclassOf<AActor> ActorClass;

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "ContentAlchemy")
    EReagentPlacementLocation PlacementLocation = EReagentPlacementLocation::Anywhere;

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "ContentAlchemy")
    EReagentPlacementFacing PlacementFacing = EReagentPlacementFacing::Any;

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "ContentAlchemy")
    EReagentFillBoxBehavior FillBoxBehavior = EReagentFillBoxBehavior::None;

    // Optional: Custom tag for identification
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "ContentAlchemy")
    FString NameTag = "Reagent";
};

UCLASS(Blueprintable, ClassGroup=(Custom), meta=(BlueprintSpawnableComponent))
class ALCHEMYRUN_API UAlchemyRecipeComponent : public UActorComponent
{
    GENERATED_BODY()
    friend class AAlchemist;
    
public:
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "ContentAlchemy")
    TArray<FAlchemyReagentSpec> RequiredReagents;

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "ContentAlchemy")
    TArray<FAlchemyReagentSpec> DecorationReagents;

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "ContentAlchemy")
    float GenerationEdgeBuffer = 50.f;

    UAlchemyRecipeComponent();

    // Generate reagents (actors) for this recipe
    UFUNCTION(BlueprintCallable, Category = "ContentAlchemy")
    virtual void InitializeRecipe(int32 Seed, const AActor* Parent, UBoxComponent* FillBox);

    // Generate reagents (actors) for this recipe
    UFUNCTION(BlueprintCallable, Category = "ContentAlchemy")
    void GenerateStructureReagents();

    // Generate reagents (actors) for this recipe
    UFUNCTION(BlueprintCallable, Category = "ContentAlchemy")
    void GenerateRequiredReagents();

    // Generate reagents (actors) for this recipe
    UFUNCTION(BlueprintCallable, Category = "ContentAlchemy")
    void GenerateDecorationReagents();

    // List of actors generated by this recipe
    UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "ContentAlchemy")
    TArray<AActor*> GeneratedActors;

    // Cleanup previously generated actors
    UFUNCTION(BlueprintCallable, Category = "ContentAlchemy")
    void ClearGeneratedActors();

protected:
    USceneComponent* AttachParent;
    UBoxComponent* FillBox;

    // Called when the component is about to be destroyed
    virtual void BeginDestroy() override;

    // Random stream for deterministic generation
    FRandomStream RandomStream;

    //  This is the function that actually spawns the Reagents.  Override this with procedural generation logic.
    virtual void GenerateStructureReagentsImpl();

    //  This is the function that actually spawns the Reagents.  Override this with procedural generation logic.
    virtual void GenerateRequiredReagentsImpl();

    //  This is the function that actually spawns the Reagents.  Override this with procedural generation logic.
    virtual void GenerateDecorationReagentsImpl();

    // Finds an actor with a given tag name.  Uses SearchActorClass is provided.
    AActor* FindReagent(const FString& SearchNameTag, const TSubclassOf<AActor>& SearchActorClass);

    // Returns the size of an ActorClass
    static FVector GetActorClassBounds(const TSubclassOf<AActor>& ActorClass);
};

