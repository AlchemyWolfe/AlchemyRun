// Copyright Alchemy Wolfe.  All Rights Reserved.

#pragma once

#include "CoreMinimal.h"
#include "Components/ActorComponent.h"
#include "Components/BoxComponent.h"
#include "AlchemyCatalog.h"
#include "AlchemyRecipeComponent.generated.h"

UCLASS(Blueprintable, ClassGroup=(Custom), meta=(BlueprintSpawnableComponent))
class ALCHEMYRUN_API UAlchemyRecipeComponent : public UActorComponent
{
    GENERATED_BODY()

public:
    UAlchemyRecipeComponent();

    // Generate reagents (actors) for this recipe
    UFUNCTION(BlueprintCallable, Category = "AlchemyRecipe")
    void GenerateReagents(int32 Seed, AActor* Parent, UBoxComponent* FillBox);

    // List of actors generated by this recipe
    UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "AlchemyRecipe")
    TArray<AActor*> GeneratedActors;

    // Cleanup previously generated actors
    UFUNCTION(BlueprintCallable, Category = "AlchemyRecipe")
    void ClearGeneratedActors();

protected:
    // Called when the component is about to be destroyed
    virtual void BeginDestroy() override;

    // Random stream for deterministic generation
    FRandomStream RandomStream;

    // Flag indicating if actors have been generated
    bool bGenerated;

    //  This is the function that actually spawns the Reagents.  Override this with procedural generation logic.
    virtual void GenerateReagentsImpl(AActor* Parent, UBoxComponent* FillBox);

    // Creates an Actor from a StaticMesh
    AActor* SpawnStaticMesh(UStaticMesh* Mesh, USceneComponent* AttachParent, const FString& Name, FVector LocalLocation, FRotator LocalRotation);

    // Creates an Actor from an ActorClass
    AActor* SpawnActor(const TSubclassOf<AActor>& ActorClass, USceneComponent* AttachParent, const FString& Name, const FVector& LocalLocation, const FRotator& LocalRotation);
};

